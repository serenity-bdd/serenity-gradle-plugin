//import net.serenitybdd.builds.ProjectVersionCounter
/**
 * To build a release version with the same version number as the serenity core dependency:
 *   gradle build -PcoreRelease
 * To build a release with a specific version number, use:
 *   gradle build -PnextVersion=1.2.3
 *
 * To upload a new release to Nexus:
 *   gradle clean uploadArchives -PcoreRelease
 *
 * Requirement environment variables:
 *   - OSSRHUSERNAME - Nexus username
 *   - OSSRHPASSWORD - Nexus password
 */

plugins {
    /// XXX - 2022-05-10: id 'com.gradle.plugin-publish' version '1.0.0-rc-1' requires changes
    // not documented yet. See https://github.com/gradle/gradle/issues/20718
    id 'com.gradle.plugin-publish' version '0.21.0'
    id 'java-gradle-plugin'

    // Building
    id 'java'
    id 'groovy'
    id 'maven-publish'

    // Signing
    id 'signing'

    // Deploying
    id 'io.codearte.nexus-staging' version '0.30.0'
}

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/groups/public"
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}
// test classes require java 17
tasks.named("compileTestJava", JavaCompile) {
    javaCompiler = javaToolchains.compilerFor { languageVersion = JavaLanguageVersion.of(17) }
}
tasks.withType(Test) {
    javaLauncher = javaToolchains.launcherFor { languageVersion = JavaLanguageVersion.of(17) }
}

signing {
    required { false }
}

tasks.withType(Sign) {
    onlyIf { false }
}

group = 'net.serenity-bdd'
archivesBaseName = "serenity-gradle-plugin"
version = project.findProperty("nextVersion") ?: "0.0.1"  // fallback for safety
println "BUILDING VERSION ${project.version}"


task createNewVersionTag(type: Exec) {
    executable "sh"
    args "-c", "git tag -f -a v$nextVersion -m'release tag'"
}

task pushVersionTag(type: Exec, dependsOn: 'createNewVersionTag') {
    executable "sh"
    args "-c", "git push -f origin v$nextVersion"
}

task tagNewVersion() {
    dependsOn pushVersionTag
}

wrapper {
    gradleVersion = '7.4.2'
    distributionType = 'all'
}

test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors() * 4
}


configurations.all {
    resolutionStrategy {
        // fail fast on dependency convergence problems
        // failOnVersionConflict()
        force "commons-collections:commons-collections:${commonsCollectionsVersion}",
                "xml-apis:xml-apis:${xmlApiVersion}",
                "commons-codec:commons-codec:${commonsCodecVersion}",
                "com.google.code.gson:gson:${gsonVersion}"
    }
}

dependencies {
    implementation("net.serenity-bdd:serenity-core:${serenityCoreVersion}")
    implementation("net.serenity-bdd:serenity-model:${serenityCoreVersion}")
    implementation("net.serenity-bdd:serenity-junit:${serenityCoreVersion}")

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.11.0")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.11.0")
    testImplementation("org.assertj:assertj-core:3.25.3")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.11.0")
}

jar {
    manifest {
        attributes("Implementation-Title": "Serenity Gradle Plugin",
                "Implementation-Version": project.version.toString())
    }
}
javadoc.options.addStringOption('Xdoclint:none', '-quiet')
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:-options"
}

gradlePlugin {
    plugins {
        serenityPlugin {
            id = 'net.serenity-bdd.serenity-gradle-plugin'
            implementationClass = 'net.serenitybdd.plugins.gradle.SerenityPlugin'
        }
    }
}

pluginBundle {
    website = 'https://www.serenity-bdd.info/'
    vcsUrl = 'https://github.com/serenity-bdd/serenity-gradle-plugin'
    description = 'Serenity Gradle Plugin'
    tags = ['serenity-bdd', 'test-automation']

    plugins {
        serenityPlugin {
            // id is captured from java-gradle-plugin configuration
            displayName = 'Gradle Serenity BDD plugin'
        }
    }
}
